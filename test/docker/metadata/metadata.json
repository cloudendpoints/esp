{"instance":{"attributes":{"cluster-location":"us-west1","cluster-name":"endpoints-01","configure-sh":"#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\n### Hardcoded constants\nDEFAULT_CNI_VERSION=\"v0.6.0\"\nDEFAULT_CNI_SHA1=\"d595d3ded6499a64e8dac02466e2f5f2ce257c9f\" \nDEFAULT_NPD_VERSION=\"v0.4.1\"\nDEFAULT_NPD_SHA1=\"a57a3fe64cab8a18ec654f5cef0aec59dae62568\"\nDEFAULT_MOUNTER_TAR_SHA=\"8003b798cf33c7f91320cd6ee5cec4fa22244571\"\n###\n\n# Use --retry-connrefused opt only if it's supported by curl.\nCURL_RETRY_CONNREFUSED=\"\"\nif curl --help | grep -q -- '--retry-connrefused'; then\n  CURL_RETRY_CONNREFUSED='--retry-connrefused'\nfi\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction download-kube-master-certs {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_master_certs=\"/tmp/kube-master-certs.yaml\"\n  curl --fail --retry 5 --retry-delay 3 ${CURL_RETRY_CONNREFUSED} --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_master_certs}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_master_certs}\" > \"${KUBE_HOME}/kube-master-certs\")\n  rm -f \"${tmp_kube_master_certs}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 ${CURL_RETRY_CONNREFUSED} \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction is-preloaded {\n  local -r key=$1\n  local -r value=$2\n  grep -qs \"${key},${value}\" \"${KUBE_HOME}/preload_info\"\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction remount-flexvolume-directory {\n  local -r flexvolume_plugin_dir=$1\n  mkdir -p $flexvolume_plugin_dir\n  mount --bind $flexvolume_plugin_dir $flexvolume_plugin_dir\n  mount -o remount,exec $flexvolume_plugin_dir\n}\n\nfunction install-gci-mounter-tools {\n  CONTAINERIZED_MOUNTER_HOME=\"${KUBE_HOME}/containerized_mounter\"\n  local -r mounter_tar_sha=\"${DEFAULT_MOUNTER_TAR_SHA}\"\n  if is-preloaded \"mounter\" \"${mounter_tar_sha}\"; then\n    echo \"mounter is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading gci mounter tools.\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  download-or-bust \"${mounter_tar_sha}\" \"https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar\"\n  cp \"${KUBE_HOME}/kubernetes/server/bin/mounter\" \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  mv \"${KUBE_HOME}/mounter.tar\" /tmp/mounter.tar\n  tar xf /tmp/mounter.tar -C \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  rm /tmp/mounter.tar\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet\"\n}\n\n# Install node problem detector binary.\nfunction install-node-problem-detector {\n  if [[ -n \"${NODE_PROBLEM_DETECTOR_VERSION:-}\" ]]; then\n      local -r npd_version=\"${NODE_PROBLEM_DETECTOR_VERSION}\"\n      local -r npd_sha1=\"${NODE_PROBLEM_DETECTOR_TAR_HASH}\"\n  else\n      local -r npd_version=\"${DEFAULT_NPD_VERSION}\"\n      local -r npd_sha1=\"${DEFAULT_NPD_SHA1}\"\n  fi\n\n  if is-preloaded \"node-problem-detector\" \"${npd_sha1}\"; then\n    echo \"node-problem-detector is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading node problem detector.\"\n  local -r npd_release_path=\"https://storage.googleapis.com/kubernetes-release\"\n  local -r npd_tar=\"node-problem-detector-${npd_version}.tar.gz\"\n  download-or-bust \"${npd_sha1}\" \"${npd_release_path}/node-problem-detector/${npd_tar}\"\n  local -r npd_dir=\"${KUBE_HOME}/node-problem-detector\"\n  mkdir -p \"${npd_dir}\"\n  tar xzf \"${KUBE_HOME}/${npd_tar}\" -C \"${npd_dir}\" --overwrite\n  mv \"${npd_dir}/bin\"/* \"${KUBE_BIN}\"\n  chmod a+x \"${KUBE_BIN}/node-problem-detector\"\n  rmdir \"${npd_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${npd_tar}\"\n}\n\nfunction install-cni-binaries {\n  local -r cni_tar=\"cni-plugins-amd64-${DEFAULT_CNI_VERSION}.tgz\"\n  local -r cni_sha1=\"${DEFAULT_CNI_SHA1}\"\n  if is-preloaded \"${cni_tar}\" \"${cni_sha1}\"; then\n    echo \"${cni_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading cni binaries\"\n  download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n  local -r cni_dir=\"${KUBE_HOME}/cni\"\n  mkdir -p \"${cni_dir}/bin\"\n  tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}/bin\" --overwrite\n  mv \"${cni_dir}/bin\"/* \"${KUBE_BIN}\"\n  rmdir \"${cni_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${cni_tar}\"\n}\n\nfunction install-kube-manifests {\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  local dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n\n  if is-preloaded \"${manifests_tar}\" \"${manifests_tar_hash}\"; then\n    echo \"${manifests_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_BIN}/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_BIN}/health-monitor.sh\"\n\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n# A helper function for loading a docker image. It keeps trying up to 5 times.\n#\n# $1: Full path of the docker image\nfunction try-load-docker-image {\n  local -r img=$1\n  echo \"Try to load docker image file ${img}\"\n  # Temporarily turn off errexit, because we don't want to exit on first failure.\n  set +e\n  local -r max_attempts=5\n  local -i attempt_num=1\n  until timeout 30 ${LOAD_IMAGE_COMMAND:-docker load -i} \"${img}\"; do\n    if [[ \"${attempt_num}\" == \"${max_attempts}\" ]]; then\n      echo \"Fail to load docker image file ${img} after ${max_attempts} retries. Exit!!\"\n      exit 1\n    else\n      attempt_num=$((attempt_num+1))\n      sleep 5\n    fi\n  done\n  # Re-enable errexit.\n  set -e\n}\n\n# Loads kube-system docker images. It is better to do it before starting kubelet,\n# as kubelet will restart docker daemon, which may interfere with loading images.\nfunction load-docker-images {\n  echo \"Start loading kube-system docker images\"\n  local -r img_dir=\"${KUBE_HOME}/kube-docker-files\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n    try-load-docker-image \"${img_dir}/kube-apiserver.tar\"\n    try-load-docker-image \"${img_dir}/kube-controller-manager.tar\"\n    try-load-docker-image \"${img_dir}/kube-scheduler.tar\"\n  else\n    try-load-docker-image \"${img_dir}/kube-proxy.tar\"\n  fi\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n\n  if is-preloaded \"${server_binary_tar}\" \"${server_binary_tar_hash}\"; then\n    echo \"${server_binary_tar} is preloaded.\"\n  else\n    echo \"Downloading binary release tar\"\n    download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n    tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n    # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n    local -r src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n    local dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n    mkdir -p \"${dst_dir}\"\n    cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n    if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n      cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n    else\n      cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n      cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n    fi\n    load-docker-images\n    mv \"${src_dir}/kubelet\" \"${KUBE_BIN}\"\n    mv \"${src_dir}/kubectl\" \"${KUBE_BIN}\"\n\n    mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n    mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n  fi\n\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]] && \\\n     [[ \"${ENABLE_NODE_PROBLEM_DETECTOR:-}\" == \"standalone\" ]]; then\n    install-node-problem-detector\n  fi\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    install-cni-binaries\n  fi\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  install-kube-manifests\n  chmod -R 755 \"${KUBE_BIN}\"\n\n  # Install gci mounter related artifacts to allow mounting storage volumes in GCI\n  install-gci-mounter-tools\n\n  # Remount the Flexvolume directory with the \"exec\" option, if needed.\n  if [[ \"${REMOUNT_VOLUME_PLUGIN_DIR:-}\" == \"true\" && -n \"${VOLUME_PLUGIN_DIR:-}\" ]]; then\n    remount-flexvolume-directory \"${VOLUME_PLUGIN_DIR}\"\n  fi\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n}\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\nKUBE_BIN=\"${KUBE_HOME}/bin\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\nif [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n  download-kube-master-certs\nfi\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n","created-by":"projects/870766319168/zones/us-west1-c/instanceGroupManagers/gke-endpoints-01-default-pool-53f6bcef-grp","gci-ensure-gke-docker":"true","gci-update-strategy":"update_disabled","google-compute-enable-pcid":"true","instance-template":"projects/870766319168/global/instanceTemplates/gke-endpoints-01-default-pool-53f6bcef","kube-env":"ALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURERENDQWZTZ0F3SUJBZ0lSQUtIcFg0SWk2VVBmZzN1ZmplKzNkMU13RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa01qZzNORGxpWlRndE5EZzBOUzAwTTJaaExUbGpOamt0T0RoaFlqWm1PV0UzTm1JeQpNQjRYRFRFNE1EUXlOVEV6TWpRMU1Gb1hEVEl6TURReU5ERTBNalExTUZvd0x6RXRNQ3NHQTFVRUF4TWtNamczCk5EbGlaVGd0TkRnME5TMDBNMlpoTFRsak5qa3RPRGhoWWpabU9XRTNObUl5TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBbFBScSthRFExbkttTXVJME1HaU9GaEluWGM0NWhsL3IzcGRtYlp6UApJOFBjMlNKRUZ4WWlScEZOVkJQTjQrWm5BQWxLRUU3QkpXSTVJejNIWEFpMmswWVVFZDNtbkNBaTBRUzhCQjU0Ck1WeUNxSGVHTGhFbk9UaTVlc3dsaTFLSjF5cTJvTzhjN0N4ckphNTM4b3dmaEZHMVpnU3hQSHNwOEpkZndsb0QKbmdVSmVkdmRzOTFIUWVOYXBWRnFtOHl1MnZCeFVXUkhHRUV5ZWMxSkpGTVJvMmFXdEwxb0ZVMnZCdUc5a1hwbAphcjJESHlpaTVlbmFyNWZuaEU1ODRrUk5UbVhYLzlqQjFobEZkVlpoeElEU0tHOTdhZTVpd2xzOVl6NjNyRk5rCld5NExwaVJId1JyeEo5YmFNU0hwTFFmdGdCZEM3aURET0JTLzMwNytzZXE3endJREFRQUJveU13SVRBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQQpHRXMweTM3SlJYVm50R3VacE5qTmRHMzJORndzTm9BTFBJWHEyME16MWt1QjFpVXZjQmd4RGRFOUJrTHlBbG1mCnNpdFlaZnNDZVdPRkhvQXY1N1VFUCtFOGQxRmhTZk5YeHkxVFVBZjNQSmdZYlpXYUJZaHZmQ3E4eGNpNkZoeWcKdHowY2o3ZFExUk8vMzltRUwzeFk4K2hTY3hrMXZKRmZVQXdoZWNGSXgxc2dNU3JpVVB3MWNObFAyN1pkdG5zdQo0K0J3RTZiangzTGpRTlp5aEZhYmxjT2Qrc0xiTU9sZ0FNRDZwTlBackgrNml3NWVpcldaV0FKNDFvM3dFaDVECmVhM2x3eWxsa1VoSUtjK1dmNXRPMkdqRmdqWG1FUVBBYmxIak9EalpIRGlwdWttWFpwbVB5OXpwSk1ocktuNkgKWEhSbVgvU2hBekVBZ2VZOXVaT1RyZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.32.0.0/14\nCLUSTER_NAME: endpoints-01\nDISABLE_DOCKER_LIVE_RESTORE: \"true\"\nDNS_DOMAIN: cluster.local\nDNS_SERVER_IP: 10.35.240.10\nDOCKER_REGISTRY_MIRROR_URL: https://mirror.gcr.io\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: stackdriver\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_METRICS_SERVER: \"true\"\nENABLE_NODE_LOGGING: \"true\"\nENABLE_NODE_PROBLEM_DETECTOR: standalone\nENV_TIMESTAMP: \"2018-04-25T14:24:49+00:00\"\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nFEATURE_GATES: ExperimentalCriticalPodAnnotation=true\nHPA_USE_REST_CLIENTS: \"true\"\nINSTANCE_PREFIX: gke-endpoints-01-a9aea0d6\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 5bf5cc4aef1bd86d01cba5ba02ad4737d84edb64\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release-gke/release/v1.9.6-gke.1/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-gke-eu/release/v1.9.6-gke.1/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-gke-asia/release/v1.9.6-gke.1/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: qDKR3hpAYN76iK1lyuR7neWTRj_STjB1BgS-CoDmA78=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMzRENDQWNTZ0F3SUJBZ0lSQU9mTHBnb2Z0ZFMzaUNSaStleTUwZ0l3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa01qZzNORGxpWlRndE5EZzBOUzAwTTJaaExUbGpOamt0T0RoaFlqWm1PV0UzTm1JeQpNQjRYRFRFNE1EUXlOVEUwTWpRMU1Gb1hEVEl6TURReU5ERTBNalExTUZvd0VqRVFNQTRHQTFVRUF4TUhhM1ZpClpXeGxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFJN05DVnZuZkFZV3NMbEwKNHRibis3eUkrZUVZbGt0Zkx5dWtwenVHMGtNQlRMZlZUTGI0QjlHY21TdlVIL1MrUVFCU3FDV3pQZHAyRlhQVgpjSFZnTnRNSlNOZ2sxcEV2Zkt1OUM3NGt6bGx6c1RaRnprckpWajRoUFRTT2lXWDVmVUNKREptYldJMDdGSFMrCjB2bTI5U3FtY254SERBbnlqaVpiZm9ycVczU2dtM0pRL05IdHl4T1EreVJJN3daUSt1aFhRODlSZWFsT3N0a0wKNUY3ZHVRQ3lMT0pZd0lmN24ydzA4SjAwaGRtaEZ0WnlPSzRMdzhJMFduL2pMZkJPTy9vOHNrdzd5QjdudC9DVgpSRUZGVjRKQTVmTVlJQS9Hb2pmOUxyM3NjWHFKWlU3V0l5UkticUMrVU9FUE5GZUlCWEFld3ZVdWdsdkdrZDl0CmY4RUZqbjBDQXdFQUFhTVFNQTR3REFZRFZSMFRBUUgvQkFJd0FEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUEKQ25uUHVJUkJqZytDSHp3WGZ3YlJsSFFsd3pQb1ordGJRKzJVbXpQakFhaUtWSGxKMU9GNU9NZElORi8zMjRJTApyc3RzTjNoeWQyait2QWFsR2psTnd4VHVtMWgzUHgwNFpGSUI1WXRvQW1neHpCdE5GbHNLZWltT2UxdjBjenM5CnF6SE9BTThIV1FSNFhUZnEyRkZyMVRqeCttTFdKbytHT01JcU5sQnhMOWFEeUxCRVY3aDl5M3hvdjBXUEp6bE4KemJHc20xVnNkK09sUlZTb3JHd3FtODVuVDRROXRobVFwNFhkNzhsWkFwUnVVMUJZVTYxRXhDVWgxNlY3OGtzbwpsRkRSZElvUEt5L1RRVms2TzRpd1lLVTFRWVdqbkFMRzZzSjgrZC9qakU5dFpyUUkxcDM4YXZySEtJUFZhOU16CkdDdnc5MktxSElieDEzeVloa2NDZ0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBanMwSlcrZDhCaGF3dVV2aTF1Zjd2SWo1NFJpV1MxOHZLNlNuTzRiU1F3Rk10OVZNCnR2Z0gwWnlaSzlRZjlMNUJBRktvSmJNOTJuWVZjOVZ3ZFdBMjB3bEkyQ1RXa1M5OHE3MEx2aVRPV1hPeE5rWE8KU3NsV1BpRTlOSTZKWmZsOVFJa01tWnRZalRzVWRMN1MrYmIxS3FaeWZFY01DZktPSmx0K2l1cGJkS0NiY2xEOAowZTNMRTVEN0pFanZCbEQ2NkZkRHoxRjVxVTZ5MlF2a1h0MjVBTElzNGxqQWgvdWZiRFR3blRTRjJhRVcxbkk0CnJndkR3alJhZitNdDhFNDcranl5VER2SUh1ZTM4SlZFUVVWWGdrRGw4eGdnRDhhaU4vMHV2ZXh4ZW9sbFR0WWoKSkVwdW9MNVE0UTgwVjRnRmNCN0M5UzZDVzhhUjMyMS93UVdPZlFJREFRQUJBb0lCQUFjTStQQjk1UGREVStBZgptWk1sS3NqeElHNnNtL0J4RjRTa1RCSXZMWFF4Sjd4a2srQkMySUZSSmVwRDZTZFlqM1ZqSDJTV2VEQXdVcmlBCmxOMWtHSlkzUFU2dGFaOWdoTERSYVl6WlhMWTQ5VXAvTnRqUUhtblI1L3prMUJtTXNIeitaMDRHOHJVdEhNSkkKNW1UUy9rR1NyS1lWNGZKMGRKcWw1aXZEWWl4SGE1THRsYkhXRWtiQWtKYmVUQXI2L0FuNzV6N0VRS25VanFRYgo0WUJVQXVnaElsUmU1KzJDSzVpQzVzeVFFRGo4WnNKaHYyWjJPNGMzL0M1b3VFeWNpOHFwMFNjODFHeWw1OWU4Ck9yK2ttTVhNd1JWUTEvY3hvRVRESzg5R1RENHhvemt0ckZsd1Y4blRDYVF4U0d2a0MyNmliTXU3U3BsRG93UTMKbzgwL2VkRUNnWUVBd3gwSmJ6czNuUXJIY2hJSkpuTTlkTll6SmgzOXpMeDF3dWUyeS9IR0lPdVIveGZLL3U4WgpPdUtQWEdaeTBscXdSMXVZb2c5L0pDV3VDWjdJWGJ5NmpUZ1FlNUFSZ25MWnJIaGtnV3hqRmwzNTU5aDlpV0FpClFBaDJ0ajJnSXVUZnB6enZVZXZ6bmJIc2dKeXZuYVFGRzBPaDRaUFVvd0hHbkxPNkUvbk1rRFVDZ1lFQXUxenQKaGxSa21yTERZK2Y0dnY0eHowZSsxUEp3Ry82cmtVOGlOQUhhSGZWelVWMmwwcWN1M0lhMDQ2eHpJYWlJSENVNAp1aU5mRVZkL0g5MERCZVRLbnpJdExYelBMREw0bEVsQnhaajBOUFFBbmQ2SklvZk5DYmZ5K0ZCenNQTlJOUWhTCjVlbW9lOFE2L0RrZWFvQ1Q2WEtVdlNJMkRCWVB6NkVpSThEelhpa0NnWUFwTkNpWjVOZUp3b3o3K2ZNVXU2RnUKMncxU0wyTTVxVkwxSmhua1Y5cVBlVEFMdnVxUGk4NjRNTUExc3l6c1gxcDZ0MDAwYkRGZFlOZXdFR2dmNDR0Qgo1MlVUc3dqL2syR0VtcWdlN05UQUZIaUNEYVgxTE9nT3ZiclVJWTkvenZXc1M2SCttdVdIbDl0cURheklqYXJHClp6SDRnVStXWFBta2ZnLzl4L0w3UVFLQmdBRTAyZnF4ZEd4aWxrdUFaT09sODJBb1VCeEM2Mkhpdyt3Tm5HVEYKVmtnM0dtVDl1MkdkM2ZsaGpLeWlvYU1uMktpRnZOWEdBSWkyRFlXQkFOSDY1U3NkUVprM1lvWWdWZVZ1aTFQZwpaa0lwQ0EvOExObmlFZm5zQzA1NkJpU3ZqR2hSQTJlamw0Z2tmVlMrY1dteUprR3NrVFNla2NhR0pkZnFhN1BiClBEWHhBb0dCQUxONWY1Ulh0R3A1ZTU2WUVRakExblZmcU5tMWtYNDNRdGRteTY4eDBZWG9Tc092TlRGb3IyYXgKY3JraWZIQkZLaUl3d1NGNkxhblQ5YnFMaSs1djNhV2VvRyt5TjlDRGdnbmd1aE9qNE9pU29QcUVpMDBjaC8vNgpFcy9RblM0cXhPM2E3NCt5N1Fjay9mYWI1UVlTREM3KzlOSjV6WVVnQ0VabGJacitBYlpyCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBELET_TEST_ARGS: --kube-reserved=cpu=60m,memory=1019Mi\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.198.101.200\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-preemptible=true\nNODE_LOCAL_SSDS_EXT: \"\"\nNODE_PROBLEM_DETECTOR_TOKEN: JqZRvLut49LGdN1IWiDVA65acXzvQecDaEvS30itiXE=\nREMOUNT_VOLUME_PLUGIN_DIR: \"true\"\nSALT_TAR_HASH: 82c65896d2f3f52b25ffd6cfd5d51801ad09cfd2\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release-gke/release/v1.9.6-gke.1/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-gke-eu/release/v1.9.6-gke.1/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-gke-asia/release/v1.9.6-gke.1/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 2b095d4ba58a891256e3fe7f35149e4fdac2e9ab\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release-gke/release/v1.9.6-gke.1/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-gke-eu/release/v1.9.6-gke.1/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-gke-asia/release/v1.9.6-gke.1/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.35.240.0/20\nVOLUME_PLUGIN_DIR: /home/kubernetes/flexvolume\nZONE: us-west1\n","user-data":"#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      # Use --retry-connrefused opt only if it's supported by curl.\n      ExecStartPre=/bin/bash -c 'OPT=\"\"; if curl --help | grep -q -- \"--retry-connrefused\"; then OPT=\"--retry-connrefused\"; fi; /usr/bin/curl --fail --retry 5 --retry-delay 3 $OPT --silent --show-error -H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh'\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\n      [Install]\n      WantedBy=multi-user.target\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl enable kubernetes.target\n - systemctl start kubernetes.target\n"},"cpuPlatform":"Intel Broadwell","description":"","disks":[{"deviceName":"persistent-disk-0","index":0,"mode":"READ_WRITE","type":"PERSISTENT"}],"hostname":"gke-endpoints-01-default-pool-53f6bcef-9kl5.c.dazwilkin-180410-cloudprober.internal","id":6441911558456815913,"image":"projects/gke-node-images/global/images/gke-196-gke1-cos-stable-65-10323-69-0-p2-v180407-pre","licenses":[{"id":"1001010"},{"id":"1001003"}],"machineType":"projects/870766319168/machineTypes/custom-1-4096","maintenanceEvent":"NONE","name":"gke-endpoints-01-default-pool-53f6bcef-9kl5","networkInterfaces":[{"accessConfigs":[{"externalIp":"35.197.127.95","type":"ONE_TO_ONE_NAT"}],"dhcpv6Refresh":"0","dnsServers":["169.254.169.254"],"forwardedIps":["35.227.158.153"],"gateway":"10.138.0.1","ip":"10.138.0.2","ipAliases":[],"mac":"42:01:0a:8a:00:02","network":"projects/870766319168/networks/default","subnetmask":"255.255.240.0","targetInstanceIps":[]}],"preempted":"FALSE","remainingCpuTime":-1,"scheduling":{"automaticRestart":"FALSE","onHostMaintenance":"TERMINATE","preemptible":"TRUE"},"serviceAccounts":{"870766319168-compute@developer.gserviceaccount.com":{"aliases":["default"],"email":"870766319168-compute@developer.gserviceaccount.com","scopes":["https://www.googleapis.com/auth/cloud-platform"]},"default":{"aliases":["default"],"email":"870766319168-compute@developer.gserviceaccount.com","scopes":["https://www.googleapis.com/auth/cloud-platform"]}},"tags":["gke-endpoints-01-a9aea0d6-node"],"virtualClock":{"driftToken":"0"},"zone":"projects/870766319168/zones/us-west1-c"},"oslogin":{},"project":{"attributes":{"gke-endpoints-01-a9aea0d6-cidr":"default:10.32.0.0/14","serial-port-enable":"1","ssh-keys":"dazwilkin:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAHwuMCxwqSgKEo42XTf3GFkuqpAvFtBp+gekJa+eBV2zdYZLAE1sB6a4HqtDwSP1IOz2WGE1OSpvgKmY4ZZlSrv8ZgpcpMikfAM4Wg23swYRF1qeDiOSCfFTOJR3z66cQooXoyW/QjgIWEC/ppZ/ERZB2AGyXkuJxrJN58MUUBnlaGTGROkB3q7aqxe3Np/9R+PscmUUg6TXZcNsBYG6MJNXDNtr3JjszrO1gYUx1iMryIXff5SSwGfiyZXs0NbmdkIey8kC9BsrR+OfI1vNWVOg+4JOpokY9CEZaeQXidLH1/NQwiQqYrmjcRjgxNOaxGECOZU8i2kYDIoo3Zz7xKs= google-ssh {\"userName\":\"dazwilkin@google.com\",\"expireOn\":\"2018-04-25T18:27:17+0000\"}\ndazwilkin:ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBD8f66hvCbpYVS/Nt2Sr7rV4x5u6wSbFOPJuYDR4lMQO4/jsQRDS2KS6xWolPoQQVg9ZcISCTJYd1BXRsTvylEU= google-ssh {\"userName\":\"dazwilkin@google.com\",\"expireOn\":\"2018-04-25T18:27:12+0000\"}\ndazwilkin:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAE4mnCT6pLmpl+uXH2vCSt6PAwyLLRuZDEpC8wQq3oPkC3ER9rgSUpdors0VqFS9mOxftkEfQCu8F9saBB6CnX3Ltjbpt6NUouVcebzVpMWBVivN/soNiFG6eFQ57aHWZz0eHqEVMguy//qJ0YegykbPBDV6pYcpcvRKy6V9qBEP4pyhm0X5xvKTtZg5wdW+7VDVPxsIAKVFqM4bXluyKt4qBEgkb7zZFU7tRqUZ2AbLsL9OmrT3nKAEvjl1ZOVNvGdEhfNLDw4ZCnYlm9ScSyLz03Q9UAREEax4Ppkni7oAH/575ULZs16g9OROdqetjH/kopa7HCq7jFClqA4zqAU= google-ssh {\"userName\":\"dazwilkin@google.com\",\"expireOn\":\"2018-04-25T18:26:15+0000\"}\ndazwilkin:ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBI1ozFSoIYCksDRgdWYFsB87XjdH6lRjSKci8qIIoDkfi2l4108XGZyDPYQH5R8sgjMOff9c3y+hLWDdzvirR6Q= google-ssh {\"userName\":\"dazwilkin@google.com\",\"expireOn\":\"2018-04-25T18:26:13+0000\"}\ndazwilkin:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCcZnKMBzlyW4DVGLIm8IwsjI4380TNKIyUVt03xwrtWoaWhGr+tUl/LD3zBpbmzZSq2PXjxLmxbhjcvyzPd/B5bnUVpQJyD81BgX00W/mMG6vm6sAAGiZFud1UuzlQuJXrKICiRgYcAE7857itGqJdW6uGn5iJQ/B1v116mBPQ9FpCWxuJqSSVw7o/nAYPzGpGV1Zjfz3rDuLwRPBCZuskMIEwyJ5tivwBb4oOnA9trNDLf4qfobWrtnmKyoOxorGtId1HG/O3NCUGvMJ9Hf+//bolT07SUDDG3OVcIFwAMLD20vMgO/6ggB2sxy4sJzk6koLX/BKpP468DGCnuGAb dazwilkin@dazwilkin.mtv.corp.google.com\ndazwilkin:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFWqUNauA4PIui6Xhh5goAEpt7Zh1uDKORxvwQ1AbHAL3On6sJn8vsISdjaq9WxZIctupmfgJh/eMiYvEtce/q6siU+6CsLV2lzBlotFKi/Tp44fgGq4wvMHP9Fn+6/37KFwjHncC079G9Zp8u2psg+gMCzOjtUgFFbFo0Y7R5uNVqXXipIIXhiNzEjXC/GZcr38KbmWMeusyKLMF7kiPBp3343JsJWQJKDVsbUrL4S/5Wx2sTWmYkm5v5HpR/QrlJAp12pAyt51o9zs+XkNt9+nio1374glocN1v+GGmzMnWiNp8hVrrpArGi205GHsczLrar4XqeW8ohHzTdtRxV dazwilkin@skull-canyon\n","sshKeys":"\ngke-a9aea0d6de8147080eb3:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDWL3IVOv36rRfcYfWetCliDFQZjQL34wiGdyZgun0n5pPc323Caf+aZ9awTgBCnOagLFGx/z697bXp13Nk58TGGAnrOOrFMnG14JsS93L379wvG536ke0rR/7yOqMd7Bqd0RAukTGZH9ciNpwN5ulzTNwOoZORpW5pncfapqUAC5MQFY1QLVfmiCAfWLkMNDMuTZCRzY1p8kJjlr+2v5nHg5KmJPvuju1rxbFeZ+12Rdr3AcoZQf8gYVI3WCBdnRW+JV9ijdSN0+bjgT53ESBfS74io6UYbn2M+GJqlZFc23GZ3ybEi8e82WwuliFDTuM9Q61heStLpmln+O1t+A/v gke-a9aea0d6de8147080eb3@gke-a9aea0d6de8147080eb3\ngke-a9aea0d6de8147080eb3:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCUfNyG+pZsYbnn+j/rO8j+P3VQ/hAmUy+OacSgkYeMvHArKItnXJD7ZPD1HUFELZhSyv2ZMR6MEXYxq+uXpG/kV1lroo8SIe22fH6yDFznIH6/wCgT6xQuNa0EJy9ndtUkPTcqMglcpOeNXGWDUhh5V8F+QdUYwBlG6jebIzfVpbhTlJVjuDdWeOvU/FHDlLo3tPP75AYAxTCnvFHVTixX8A5Hlwr6caPDXJy+nCyeaCQ9zX+3LQ6FEpQZaFg+EExWI+NUsFRVFCfEjgp5b/8Fq9X6BVP24VBZkP3QDxFiOkohnRm3jVkeGuU0KvyOZFwCwwnrFs0MLLJ4Bb32Umm5 gke-a9aea0d6de8147080eb3@gke-a9aea0d6de8147080eb3\ngke-a9aea0d6de8147080eb3:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZkLs0d1wa+w8mw8Taz9EIW24b6gZ3r6RB0TYF9oieFvi3PgsOdpVRHfoqB/ITIAXiveFcAukqEvrAtKg9L4P0jk3FEk98nVdDwfWYjHQSMAKgUt7gim8xvD11Gtn239QOMm9FJzknd7I//iS6bHfhB1FknAw/np3xW7FX1+9u9gd+hiXQa5gAi+8btChvZ/SeFK44WzytCJvcOkdOIufPQOwudM2pIuoGPz+TALUs1WiyPxR6K2HEi2ct9040y77VfQRzeT9hIcU9kOGEMFRtOCKmRxRJi/gGyeBYmkZNvopxXp8skmXGwGvslSswWr/zO/mesbS3x4yI0mN6RgXp gke-a9aea0d6de8147080eb3@gke-a9aea0d6de8147080eb3"},"numericProjectId":870766319168,"projectId":"dazwilkin-180410-cloudprober"}}
