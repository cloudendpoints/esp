#!/bin/bash
#
# Copyright (C) Extensible Service Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#
# This script builds docker image for grpc test server.
# It can build either grpc-echo-server or grpc-interop-server.
# Its usage:
#   linux-build-grpc-docker -i grpc-echo-server-docker-image
#   linux-build-grpc-docker -o -i grpc-interop-server-docker-image


ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
GRPC_ROOT="${ROOT}/test/grpc"

. "${ROOT}/script/all-utilities" || { echo "Cannot load Bash utilities"; exit 1; }

TEST_SERVER_TARGET='//test/grpc:grpc-test-server'
TEST_SERVER_BIN='test/grpc/grpc-test-server'
TEST_SERVER_ARGS='0.0.0.0:8081'

while getopts :i:o arg; do
  case ${arg} in
    i) IMAGE="${OPTARG}";;
    o)
      TEST_SERVER_TARGET='@org_golang_google_grpc//interop/server'
      TEST_SERVER_BIN='external/org_golang_google_grpc/interop/server/server'
      TEST_SERVER_ARGS='--port=8081'
      ;;
    *) error_exit "Unrecognized argument -${OPTARG}";;
  esac
done

[[ -n "${IMAGE}" ]] || error_exit "Specify required image argument via '-i'"

echo "Checking if docker image ${IMAGE} exists.."
gcloud docker -- pull "${IMAGE}" \
  && { echo "Image ${IMAGE} already exists; skipping"; exit 0; }

BAZEL_TARGET="${ROOT}/bazel-bin/${TEST_SERVER_BIN}"
if ! [[ -e "${BAZEL_TARGET}" ]]; then
  echo "Building ${TEST_SERVER_BIN}"
  bazel build --config=release "${TEST_SERVER_TARGET}" \
    || error_exit 'Could not build ${TEST_SERVER_BIN}'
fi

cp -f "${BAZEL_TARGET}" "${GRPC_ROOT}" \
  || error_exit "Could not copy ${BAZEL_TARGET} to ${GRPC_ROOT}"

sed -e "s|TEST_SERVER_BIN|$(basename ${TEST_SERVER_BIN})|g" \
    -e "s|TEST_SERVER_ARGS|${TEST_SERVER_ARGS}|g" \
    "${GRPC_ROOT}/Dockerfile.temp" > "${GRPC_ROOT}/Dockerfile"

echo "Building Endpoints Runtime grpc docker image."
retry -n 3 docker build --no-cache -t "${IMAGE}" \
  -f "${GRPC_ROOT}/Dockerfile" "${GRPC_ROOT}" \
  || error_exit "Docker image build failed."

echo "Pushing Docker image: ${IMAGE}"
# Try 10 times, shortest wait is 10 seconds, exponential back-off.
retry -n 10 -s 10 \
    gcloud docker -- push "${IMAGE}" \
  || error_exit "Failed to upload Docker image to gcr."
