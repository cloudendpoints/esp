#!/bin/bash
#
# Copyright (C) Extensible Service Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
. ${ROOT}/script/all-utilities || { echo "Cannot load all-utilities"; exit 1; }

function check_files() {
  # Check code styl and headers
  echo 'Checking license headers.'
  "${ROOT}/script/check-license-headers" \
    || { echo 'License headers check failed.'; return 1; }

  echo 'Checking coding styles.'
  "${ROOT}/script/robot-style" \
    || { echo 'Code style check failed.'; return 1; }
}

function build_and_test() {
  local config="${1}"
  local config_flag=''
  local message='Running unit-tests, integration tests & NGINX tests'
  local error='Unit, Integration, NGINX tests failed'
  if [[ -n "${config}" ]]; then
    config_flag="--config=${config}"
    message="${message} with config ${config}"
    error="${message} with config ${config}"
  fi
  echo "${message}..."
  retry -n 3 ${BAZEL} ${BAZEL_ARGS} fetch \
    //src/... //tools/src/... //third_party:all \
    && retry -n 2 ${BAZEL} ${BAZEL_ARGS} build \
      ${BAZEL_BUILD_ARGS} ${config_flag} \
      //src/... //tools/src/... //third_party:all \
    && ${BAZEL} ${BAZEL_ARGS} test --test_output=errors ${config_flag} \
      //src/... //tools/src/... //third_party:all \
    || { echo "${error}..."; return 1; }
}

function asan() {
  build_and_test 'asan' || return 1
}

function tsan() {
  build_and_test 'tsan' || return 1
}

function tsan_nopie() {
  build_and_test 'tsan_nopie' || return 1
}

function release() {
  build_and_test 'release' || return 1
}

function coverage() {
  echo 'Running unit-tests & integration tests with coverage enabled....'
  # Output the coverage results in the ${HOME}/artifacts directory, which
  # will be uploaded to a bucket.
  mkdir -p "${HOME}/artifacts"
  ${ROOT}/script/linux-run-coverage -s ${HOME}/artifacts/coverage.summary \
    -t ${HOME}/artifacts/coverage.tar.gz \
    || { echo  'Coverage failed.'; return 1; }
}

function docker_tests() {
  echo 'Building a debian package...'
  retry -n 3 ${BAZEL} ${BAZEL_ARGS} \
    fetch //src/nginx/main:endpoints-server-proxy \
  && retry -n 2 ${BAZEL} ${BAZEL_ARGS} build ${BAZEL_BUILD_ARGS} \
    --config=release //src/nginx/main:endpoints-server-proxy \
    || { echo  'Building the debian package failed'; return 1; }

  echo 'Running Docker test...'
  "${ROOT}/test/docker/docker_test.sh" -d \
    "${ROOT}/bazel-bin/src/nginx/main/endpoints-server-proxy.deb" \
    || { echo  'Docker test failed'; return 1; }
}

