#!/bin/bash
#
# Copyright (C) Extensible Service Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#

#
# Building tagging, and pushing Docker Jenkins slave.
#

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
. ${ROOT}/script/jenkins-utilities || { echo "Cannot load Jenkins utilities"; exit 1; }

BUILD=false
PUSH=false
FORCE=false
TOOLS_BUCKET=''

# Check if an image needs to be overwritten
function update_image() {
  local image="${1}"
  [[ ${FORCE} == true ]] && return 0
  ${GCLOUD} docker -- pull "${image}"
  local image_exists=${?}
  [[ ${image_exists} -eq 0 ]] && return 1
  return 0
}

while getopts :bi:fps:t:T: arg; do
  case ${arg} in
    b) BUILD=true;;
    i) IMAGE="${OPTARG}";;
    f) FORCE=true;;
    s) SLAVE="${OPTARG}";;
    t) TAG="${OPTARG}";;
    T) TOOLS_BUCKET="${OPTARG}";;
    *) error_exit "Unrecognized argument -${OPTARG}";;
  esac
done

[[ -n "${IMAGE}" ]] || error_exit "Specify required image argument via '-i'"

# Build
if [[ "${BUILD}" == true ]]; then
  DOCKER_FILE="${ROOT}/jenkins/slaves/${SLAVE}.Dockerfile"
  [[ -e "${DOCKER_FILE=}" ]] \
    || error_exit "File ${DOCKER_FILE} does not exist.
  Please provide valid slave argument via '-s'"
  update_image "${IMAGE}"
  if [[ ${?} -eq 0 ]]; then
    echo "Building docker image ${IMAGE}."
    run retry -n 10 docker build --build-arg TOOLS_BUCKET="${TOOLS_BUCKET}" --no-cache -t ${IMAGE} \
      -f "${DOCKER_FILE}" . || error_exit "Could not build ${SLAVE}"
    echo "Pushing Docker image: ${IMAGE}"
    retry -n 3 ${GCLOUD} docker -- push "${IMAGE}" \
      || error_exit "Failed to push tag ${IMAGE}."
  fi
fi

# Tag
if [[ -n "${TAG}" ]]; then
  echo "Tagging image ${IMAGE} to tag ${TAG}."
  retry -n 3 docker tag "${IMAGE}" ${TAG}

  echo "Pushing Docker image: ${TAG}"
  retry -n 3 ${GCLOUD} docker -- push "${TAG}" \
    || error_exit "Failed to push tag ${TAG}."
fi

