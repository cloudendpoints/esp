#!/bin/bash
#
# Copyright (C) Extensible Service Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
. ${ROOT}/script/all-utilities || { echo "Cannot load Bash utilities"; exit 1; }

PLATFORM="flex"
DEB="${ROOT}/bazel-bin/src/nginx/main/endpoints-server-proxy.deb"
DOCKERFILE="Dockerfile"

while getopts :c:d:gi:p: arg; do
  case ${arg} in
    c) CONFIG="${OPTARG}";;
    d) DEB="${OPTARG}";;
    i) IMAGE="${OPTARG}";;
    p) PLATFORM="${OPTARG}";;
    *) error_exit "Unrecognized argument -${OPTARG}";;
  esac
done

[[ -n "${IMAGE}" ]] || error_exit "Specify required image argument via '-i'"
[[ -f "${DEB}" ]] || error_exit "Cannot find Debian package ${DEB}"

echo "Checking if docker image ${IMAGE} exists.."
gcloud docker -- pull "${IMAGE}" \
  && { echo "Image ${IMAGE} already exists; skipping"; exit 0; }

echo "Building Endpoints Runtime docker image."
DOCKERFILE_PATH="./docker/${PLATFORM}"

# Use same Dockerfile as Flex team to build Flex docker image.
if [[ "${PLATFORM}" == "flex" ]]; then
  FLEX_DIR=$(mktemp -d /tmp/flex_XXXXX)
  git clone https://github.com/GoogleCloudPlatform/appengine-sidecars-docker $FLEX_DIR
  # Update the Dockerfile to use local deb image
  DIMG="endpoints-runtime.deb"
  sed -i -e "s|endpoints-runtime||" \
      -e "s|EXPOSE 8080|\nADD ${DIMG} ${DIMG}\nRUN apt-get update --fix-missing -qq \&\& \\\ \n    apt-get install -qqy python \&\& \\\ \n    dpkg -i /${DIMG}\n&|" \
      "$FLEX_DIR/nginx_proxy/Dockerfile"
  DOCKERFILE_PATH="$FLEX_DIR/nginx_proxy"
  cat "$FLEX_DIR/nginx_proxy/Dockerfile"
fi

cp "${DEB}" "${DOCKERFILE_PATH}/endpoints-runtime.deb"
retry -n 3 docker build --no-cache -t "${IMAGE}" \
  -f "${DOCKERFILE_PATH}/${DOCKERFILE}" \
  "${DOCKERFILE_PATH}/"  \
  || error_exit "Docker image build failed."

# Build custom docker image for GKE/GCE.
if  [[ -n "${CONFIG}" ]]; then
  echo "Building custom docker image."
  sed -e "s|\${PARENT_IMAGE}|${IMAGE}|g" \
     "${ROOT}/docker/custom/Dockerfile.template" > "${ROOT}/docker/custom/Dockerfile"

  cp "${CONFIG}" "${ROOT}/docker/custom/server_config.cfg" \
    || error_exit "Cannot copy server config file."
  retry -n 3 docker build --no-cache  -t "${IMAGE}" ./docker/custom/  \
    || error_exit "Failed to build a custom Docker Image."

  echo "Pushing Custom Docker image: ${IMAGE}"
  retry -n 10 -s 10 \
      gcloud docker -- push "${IMAGE}" \
    || error_exit "Failed to upload custom Docker image to gcr."
else

  echo "Pushing Docker image: ${IMAGE}"

  # Try 10 times, shortest wait is 10 seconds, exponential back-off.
  retry -n 10 -s 10 \
      gcloud docker -- push "${IMAGE}" \
    || error_exit "Failed to upload Docker image to gcr."
fi
