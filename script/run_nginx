#!/bin/bash
#
# Copyright (C) Extensible Service Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#
# A simple script to rebuild and restart nginx.

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
PREFIX=${ROOT}/.nginx
NGINX_CONFIG=${ROOT}/src/nginx/conf/esp.conf
BAZEL_OPTION=

function usage() {
  echo "usage: $0 [options ...] [[restart]|stop]"
  echo "options:"
  echo "  -c: absolute path to nginx config file."
  echo "  -r: build nginx with release config."
  exit 2
}

while getopts rc:? arg; do
  case ${arg} in
    r) BAZEL_OPTION="--config=release";;
    c) NGINX_CONFIG=${OPTARG};;
    ?) usage;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.
COMMAND=${1}
if [[ "x$COMMAND" = x ]]; then
   COMMAND="restart"
fi
if [[ "x$COMMAND" != xrestart && "x$COMMAND" != xstop ]]; then
   usage
fi

NGINX=${ROOT}/bazel-bin/src/nginx/main/nginx-esp

echo "nginx binary: ${NGINX}"
echo "nginx config file: ${NGINX_CONFIG}"

function print() {
  OUT="$*"
  SIZE=$((${#OUT} + 4))
  printf "%${SIZE}s\n" | tr " " '*'
  echo "  ${OUT}"
  printf "%${SIZE}s\n" | tr " " '*'
}

(
  print "Building ESP."
  cd $ROOT
  bazel build ${BAZEL_OPTION} //src/nginx/main:nginx-esp || { print "Build failed, aborting." ; exit 1 ; }
)

if [ ! -x "${NGINX}" ]; then
  print "Cannot find nginx executable."
  exit 1
fi

function run_nginx() {
  print $*
  $*
}

# Quit current nginx if already running.
pgrep nginx 2>&1 > /dev/null
if [ $? -eq 0 ]; then
  print "Stopping current nginx."
  if [ -e ${PREFIX}/logs/nginx.pid ]; then
    run_nginx ${NGINX} -p ${PREFIX} -c $NGINX_CONFIG -s quit
  else
    killall nginx
  fi
fi

if [[ "x$COMMAND" = xstop ]]; then
   exit 0
fi

if [ -d ${PREFIX}/logs ]; then
  TEMP=$(mktemp -d ${PREFIX}/logs.XXXXXXXX)
  print "Backing up logs in ${TEMP}"
  mv ${PREFIX}/logs ${TEMP}
fi

run_nginx mkdir -p ${PREFIX}/logs

print "Running nginx with the following config:"
${NGINX} -p ${PREFIX} -c ${NGINX_CONFIG} -T -q
run_nginx ${NGINX} -p ${PREFIX} -c ${NGINX_CONFIG}
