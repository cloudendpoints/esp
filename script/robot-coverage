#!/bin/bash
#
# Copyright (C) Extensible Service Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#

COVERAGE_JSON=""
COVERAGE_SUMMARY=""
COVERAGE_DATA=""

while getopts j:d:s:m arg; do
  case ${arg} in
    j) COVERAGE_JSON=${OPTARG};;
    d) COVERAGE_DATA=${OPTARG};;
    s) COVERAGE_SUMMARY=${OPTARG};;
    m) echo "-m is deprecated and a noop";;
    ?) exit 1;;
  esac
done

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
. ${ROOT}/script/all-utilities || { echo "Cannot load Bash utilities"; exit 1; }

${ROOT}/script/linux-run-coverage \
    -s esp-code-coverage.summary \
    -t esp-code-coverage.tar.gz \
  || error_exit "Code coverage run failed."

if [[ -n "${COVERAGE_DATA}" ]]; then
  echo "Uploading code coverage results."
  gsutil -h Content-Type:application/x-gtar-compressed cp \
      esp-code-coverage.tar.gz "${COVERAGE_DATA}" \
    || error_exit "gsutil upload of coverage data failed."
fi

if [[ -n "${COVERAGE_SUMMARY}" ]]; then
  echo "Uploading coverage summary."
  gsutil -h Content-Type:text/plain cp \
      esp-code-coverage.summary "${COVERAGE_SUMMARY}" \
    || error_exit "Simple coverage summary failed."
fi

if [[ -n "${COVERAGE_JSON}" ]]; then
  echo "Generating and uploading coverage JSON snippet."

  sed -E -e 's/ +//' -e 's/\.+: |[()]/ /g' esp-code-coverage.summary \
    | awk '
      BEGIN {
        comma = 0
        print "{"
      }
      /[0-9]+/  {
        if (comma) {
          printf(",\n")
        }
        printf "  \"%sPercent\": \"%s\",\n", $1, $2
        printf "  \"%sCovered\": %s,\n", $1, $3
        printf "  \"%sTotal\": %s", $1, $5
        comma = 1
      }
      END {
        print "\n}"
      }
      ' \
    | gsutil -h Content-Type:application/json cp - "${COVERAGE_JSON}"

  if [[ "${PIPESTATUS[0]}" -ne 0 \
     || "${PIPESTATUS[1]}" -ne 0 \
     || "${PIPESTATUS[2]}" -ne 0 ]]; then
    error_exit "Coverage JSON summary failed."
  fi
fi

( echo "Running Sanitizer tests with Bazel."

  ${SUDO} ./script/obliterate

  bazel clean \
    || error_exit "Failed to bazel clean before the build."

  # ASAN Tests
  bazel test --test_output=errors --config=asan --test_tag_filters=-no_asan \
    //src/... //tools/src/... //third_party:all \
    || error_exit "Failed to run ASAN tests"

  # TSAN Tests
  bazel test --test_output=errors --config=tsan --test_tag_filters=-no_tsan \
    //src/... //tools/src/... //third_party:all \
    || error_exit "Failed to run TSAN tests"

) || error_exit "Sanitizer Bazel test failed."
