#!/bin/bash
#
# Copyright (C) Extensible Service Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#
# May require sudo login.

if [[ "$(uname)" != "Linux" ]]; then
  echo "Run on Linux only."
  exit 1
fi

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. ${DIR}/all-utilities || { echo "Cannot load Bash utilities" ; exit 1 ; }
# TOOLS
. ${DIR}/tools/linux-install-bazel || error_exit "Cannot load Bazel install script"
. ${DIR}/tools/linux-install-docker || error_exit "Cannot load Docker install script"
. ${DIR}/tools/linux-install-clang || error_exit "Cannot load Clang install script"
. ${DIR}/tools/linux-install-gcloud || error_exit "Cannot load gcloud install script"
. ${DIR}/tools/linux-install-wrk || error_exit "Cannot load wrk install script"
. ${DIR}/tools/linux-install-nodejs || error_exit "Cannot load nodejs install script"

export DEBIAN_FRONTEND=noninteractive

function install_packages() {
  echo "Installing tools."
  clear_apt \
  && ${SUDO} apt-get -qqy install \
    apt-transport-https \
    autoconf \
    automake \
    autotools-dev \
    ca-certificates \
    curl \
    ca-certificates-java=20161107~bpo8+1 \
    g++ \
    gcc \
    gettext \
    git \
    lcov \
    libev-dev \
    libevent-dev \
    libjemalloc-dev \
    libssl-dev \
    libio-socket-ssl-perl \
    libtool \
    make \
    openjdk-8-jdk-headless \
    python-pip \
    pkg-config \
    unzip \
    uuid-dev \
    uuid-runtime \
    wget \
    zip \
    zlib1g-dev \
    && return 0
  return 1
  # openjdk-8-source
}


while getopts :b:p: arg; do
  case ${arg} in
    p) PLATFORM="${OPTARG}";;
    b) TOOLS_BUCKET="${OPTARG}";;
  esac
done

[[ -z "${PLATFORM}" ]] && error_exit 'PLATFORM is not set'

echo 'Clearing packages in apt'
${SUDO} apt-get clean

# Installing dependencies
retry install_packages || error_exit 'Cannot install required packages.'
retry ${SUDO} pip install --upgrade python-gflags || error_exit 'Cannot install gflags.'

# Installing tools
echo "Installing tools if necessary"
if [[ -d "${TOOLS_DIR}" ]]; then
  [[ -n "${SUDO}" ]] && ${SUDO} chown -R "${USER}" "${TOOLS_DIR}"
else
  mkdir -p "${TOOLS_DIR}" -m 0777
fi
update_clang
update_gcloud
update_bazel
update_docker "${PLATFORM}"
update_wrk
update_node_js
clear_apt

echo "Software installation complete."
