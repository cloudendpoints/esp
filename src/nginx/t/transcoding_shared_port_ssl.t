# Copyright (C) Extensible Service Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#
use strict;
use warnings;

#### HELLO, FUTURE MAINTAINER OF THIS CODE!
#### READ THIS IF THE TEST IS FAILING AND THE OTHER TESTS ARE ALL WORKING

# This test depends on a self-signed certificate.  It might fail if
# the certificate expires.  So you might need to periodically
# regenerate the certificate.  This is pretty easy -- just follow the
# instructions below for test.crt, or use whatever future technology
# is appropriate to the situation.


################################################################################

use src::nginx::t::ApiManager;   # Must be first (sets up import path to the Nginx test module)
use src::nginx::t::HttpServer;
use Test::Nginx;  # Imports Nginx's test module
use Test::More;   # And the test framework

eval { require IO::Socket::SSL; };
plan(skip_all => 'IO::Socket::SSL not installed') if $@;
eval { IO::Socket::SSL::SSL_VERIFY_NONE(); };
plan(skip_all => 'IO::Socket::SSL too old') if $@;

################################################################################

# Port assignments
my $NginxPort = ApiManager::pick_port();
my $GrpcBackendPort = ApiManager::pick_port();
my $ServiceControlPort = ApiManager::pick_port();

my $t = Test::Nginx->new()->has(qw/http proxy/)->plan(17);

# Save service name in the service configuration protocol buffer file.
#
$t->write_file('service.pb.txt',
  ApiManager::get_transcoding_test_service_config(
    'endpoints-transcoding-test.cloudendpointsapis.com',
    "http://127.0.0.1:${ServiceControlPort}"));

# For posterity, here's where the next two files came from:
#
# * test.key was generated by openssl:
#
#     $ openssl genrsa -out test.key 2048
#
# * test.crt is a self-signed certificate, which is useful for testing
#   but not much else.  To create it, we started by generating a
#   certificate signing request:
#
#     $ openssl req -new -key test.key -out test.csr
#
#   and used it to generate a self-signed certificate good for one year:
#
#     $ openssl x509 -req -days 365 -in test.csr -signkey test.key -out test.crt
#
#   (For an actual production site, you'd send the certificate signing
#   request to a certificate authority, and they'd send you the
#   certificate.  But we're not going to check an actual production
#   certificate into the Endpoints test code.)
#
#   When creating the certificate signing request, it's important to
#   specify "localhost" as the common name (server FQDN), since that's
#   what used to connect to the server in the test.

$t->write_file('test.key', ApiManager::read_test_file('testdata/test.key'));
$t->write_file('test.crt', ApiManager::read_test_file('testdata/test.crt'));

ApiManager::write_file_expand($t, 'nginx.conf', <<"EOF");
%%TEST_GLOBALS%%
daemon off;
events {
  worker_connections 32;
}
http {
  %%TEST_GLOBALS_HTTP%%
  server {
    listen 127.0.0.1:${NginxPort} ssl http2;
    ssl_certificate_key test.key;
    ssl_certificate test.crt;
    server_name localhost;
    location / {
      endpoints {
        api service.pb.txt;
        %%TEST_CONFIG%%
        on;
      }
      grpc_pass 127.0.0.1:${GrpcBackendPort} override;
    }
  }
}
EOF

ApiManager::run_transcoding_test_server($t, 'backend.log', "127.0.0.1:${GrpcBackendPort}");
$t->run_daemon(\&service_control, $t, $ServiceControlPort, 'servicecontrol.log');
is($t->waitforsocket("127.0.0.1:${GrpcBackendPort}"), 1, 'gRPC backend socket ready.');
is($t->waitforsocket("127.0.0.1:${ServiceControlPort}"), 1, 'Service control socket ready.');
$t->run();

################################################################################

my $ctx = new IO::Socket::SSL::SSL_Context(
  SSL_verify_mode => IO::Socket::SSL::SSL_VERIFY_NONE(),
  SSL_session_cache_size => 100);

my $response = ApiManager::http_get($NginxPort,'/shelves?key=api-key-1',
  socket => get_ssl_socket($ctx, $NginxPort));

my $expected = { 'shelves' => [
    {'id' => '1', 'theme' => 'Fiction'}, {'id' => '2', 'theme' => 'Fantasy'}, ] };

ok(ApiManager::verify_http_json_response($response, $expected));

# Note: libgrpc will use this environment variable to look up its root
# certificates file.  Pointing it at the server's certificate
# effectively tells libgrpc to trust the server's certificate, which
# is useful since it's not actually signed by a real certificate
# authority.
$ENV{'GRPC_DEFAULT_SSL_ROOTS_FILE_PATH'} = $t->testdir() . '/test.crt';

my ($rc, $response) = &ApiManager::call_bookstore_client($t,
  "-backend localhost:${NginxPort} -method ListShelves -use_ssl true -api_key api-key-2");

is ($rc, 0, "bookstore-client returned success");
ok(ApiManager::compare_json($response, $expected), "GRPC response is as expected");

$t->stop_daemons();

################################################################################

my $backend_output = $t->read_file('backend.log');
my @backend_requests = split /\r\n\r\n/, $backend_output;

is(scalar @backend_requests, 2, 'Backend received two requests.');
ok(ApiManager::compare_json($backend_requests[0], {}), 'Backend request 1 is empty');
ok(ApiManager::compare_json($backend_requests[1], {}), 'Backend request 2 is empty');

my @requests = ApiManager::read_http_stream($t, 'servicecontrol.log');
cmp_ok(scalar @requests, '>=', 2, 'Service control received at least two requests.');

my $r = shift @requests;
is($r->{verb}, 'POST', 'Service control received a post');
is($r->{uri}, '/v1/services/endpoints-transcoding-test.cloudendpointsapis.com:check',
   'Service control uri was :check');
is($r->{headers}->{host}, "127.0.0.1:${ServiceControlPort}", 'Host header was set.');
is($r->{headers}->{'content-type'}, 'application/x-protobuf', 'Content-Type is protocol buffer.');

$r = shift @requests;
is($r->{verb}, 'POST', 'Service control received a post');
is($r->{uri}, '/v1/services/endpoints-transcoding-test.cloudendpointsapis.com:check',
   'Service control uri was :check');
is($r->{headers}->{host}, "127.0.0.1:${ServiceControlPort}", 'Host header was set.');
is($r->{headers}->{'content-type'}, 'application/x-protobuf', 'Content-Type is protocol buffer.');

################################################################################

sub service_control {
  my ($t, $port, $file) = @_;
  my $server = HttpServer->new($port, $t->testdir() . '/' . $file)
    or die "Can't create test server socket: $!\n";

  $server->on_sub('POST', '/v1/services/endpoints-transcoding-test.cloudendpointsapis.com:check', sub {
    my ($headers, $body, $client) = @_;
    print $client <<'EOF';
HTTP/1.1 200 OK
Connection: close

EOF
  });

  $server->run();
}

sub get_ssl_socket {
  my ($ctx, $port) = @_;
  my $s;

  eval {
    local $SIG{ALRM} = sub { die "timeout\n" };
    local $SIG{PIPE} = sub { die "sigpipe\n" };
    alarm(2);
    $s = IO::Socket::SSL->new(
      Proto => 'tcp',
      PeerAddr => '127.0.0.1',
      PeerPort => $port,
      SSL_verify_mode => IO::Socket::SSL::SSL_VERIFY_NONE(),
      SSL_reuse_ctx => $ctx,
      SSL_error_trap => sub { die $_[1] }
    );
    alarm(0);
  };
  alarm(0);

  if ($@) {
    log_in("died: $@");
    return undef;
  }

  return $s;
}

################################################################################
