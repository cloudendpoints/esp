// Copyright (C) Extensible Service Proxy Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
//
syntax = "proto3";

package google.api_manager.proto;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// The protobufs in this file model the messages that flow from ESP to Firebase
// rules service. The naming of the protobufs start with "Test" and should not
// be confused that the protobufs are used for testing. The protobuf names and
// message structure exactly match the protobufs defined in the firebase rules.
message TestCase {
  // The set of supported test case expectations.
  enum Expectation {
    EXPECTATION_UNSPECIFIED = 0;  // Unspecified expectation.
    ALLOW = 1;                    // Expect an allowed result.
    DENY = 2;                     // Expect a denied result.
  }

  // Mock function definition.
  //
  // Mocks must refer to a function declared by the target service. The type of
  // the function args and result will be inferred at test time. If either the
  // arg or result values are not compatible with function type declaration, the
  // request will be considered invalid.
  //
  // More than one `FunctionMock` may be provided for a given function name so
  // long as the `Arg` matchers are distinct. In the event that multiple mocks
  // match the expression, the request will be treated as an invalid argument.
  message FunctionMock {
    // Arg matchers for the mock function.
    message Arg {
      // Supported argument values.
      oneof type {
        // Argument exactly matches value provided.
        google.protobuf.Value exact_value = 1;
        // Argument matches any value provided.
        google.protobuf.Empty any_value = 2;
      }
    }

    // Possible result values from the function mock invocation.
    message Result {
      // Supported result values.
      oneof type {
        // The result is an actual value. The type of the value must match that
        // of the type declared by the service.
        google.protobuf.Value value = 1;
        // The result is undefined, meaning the result could not be computed.
        google.protobuf.Empty undefined = 2;
      }
    }

    // The name of the function.
    //
    // The function name must match one provided by a service declaration.
    string function = 1;

    // The list of `Arg` values to match. The order in which the arguments are
    // provided is the order in which they must appear in the function
    // invocation.
    repeated Arg args = 2;

    // The mock result of the function call.
    Result result = 3;
  }

  // Test expectation.
  Expectation expectation = 1;

  // Request context.
  //
  // The exact format of the request context is service-dependent. See the
  // appropriate service documentation for information about the supported
  // fields and types on the request. Minimally, all services support the
  // following fields and types:
  //
  // Request field  | Type
  // ---------------|-----------------
  // auth.uid       | `string`
  // auth.token     | `map<string, string>`
  // headers        | `map<string, string>`
  // method         | `string`
  // params         | `map<string, string>`
  // path           | `string`
  // time           | `google.protobuf.Timestamp`
  //
  // If the request value is not well-formed for the service, the request will
  // be rejected as an invalid argument.
  google.protobuf.Value request = 2;

  // Optional resource value as it appears in persistent storage before the
  // request is fulfilled.
  //
  // The resource type depends on the `request.path` value.
  google.protobuf.Value resource = 3;

  // Optional function mocks for service-defined functions. If not set, any
  // service defined function is expected to return an error, which may or may
  // not influence the test outcome.
  repeated FunctionMock function_mocks = 4;
}

message TestSuite {
  // Test cases to be executed.
  repeated TestCase test_cases = 1;
}
message TestRulesetRequest {
  // Name of the ruleset resource.
  // Format: 'projects/{project_id}/rulesets/{ruleset_id}'
  string name = 1;

  // The test suite to run against the ruleset
  oneof test {
    // Inline 'TestSuite' to run.
    TestSuite test_suite = 3;
  }
}
// Position in the `Source` content including its line, column number, and an
// index of the `File` in the `Source` message. Used for debug purposes.
message SourcePosition {
  // Name of the `File`.
  string file_name = 1;

  // Index of the `File` in the `Source` message where the content appears.
  // @OutputOnly
  int32 file_index = 2;

  // Line number of the source fragment. 1-based.
  int32 line = 3;

  // First column on the source line associated with the source fragment.
  int32 column = 4;

  // Position relative to the beginning of the file. This is used by the IDEA
  // plugin, while the line and column are used by the compiler.
  int32 current_offset = 5;
}

message TestRulesetResponse {
  // Issues include warnings, errors, and deprecation notices.
  message Issue {
    // The set of issue severities.
    enum Severity {
      // An unspecified severity.
      SEVERITY_UNSPECIFIED = 0;
      // Deprecation issue for statements and method that may no longer be
      // supported or maintained.
      DEPRECATION = 1;
      // Warnings such as: unused variables.
      WARNING = 2;
      // Errors such as: unmatched curly braces or variable redefinition.
      ERROR = 3;
    }

    // Position of the issue in the `Source`.
    SourcePosition source_position = 1;

    // Short error description.
    string description = 2;

    // The severity of the issue.
    Severity severity = 3;
  }

  // Test result message containing the state of the test as well as a
  // description and source position for test failures.
  message TestResult {
    // Valid states for the test result.
    enum State {
      STATE_UNSPECIFIED = 0;  // Test state is not set.
      SUCCESS = 1;            // Test is a success.
      FAILURE = 2;            // Test is a failure.
    }

    // Represents a service-defined function call that was invoked during test
    // execution.
    message FunctionCall {
      // Name of the function invoked.
      string function = 1;

      // The arguments that were provided to the function.
      repeated google.protobuf.Value args = 2;
    }

    // State of the test.
    State state = 1;

    // Debug messages related to test execution issues encountered during
    // evaluation.
    //
    // Debug messages may be related to too many or too few invocations of
    // function mocks or to runtime errors that occur during evaluation.
    //
    // For example: ```Unable to read variable [name: "resource"]```
    repeated string debug_messages = 2;

    // Position in the `Source` or `Ruleset` where the principle runtime error
    // occurs.
    //
    // Evaluation of an expression may result in an error. Rules are deny by
    // default, so a `DENY` expectation when an error is generated is valid.
    // When there is a `DENY` with an error, the `SourcePosition` is returned.
    //
    // E.g. `error_position { line: 19 column: 37 }`
    SourcePosition error_position = 3;

    // The set of function calls made to service-defined methods.
    //
    // Function calls are included in the order in which they are encountered
    // during evaluation, are provided for both mocked and unmocked functions,
    // and included on the response regardless of the test `state`.
    repeated FunctionCall function_calls = 4;
  }

  // Syntactic and semantic `Source` issues of varying severity. Issues of
  // `ERROR` severity will prevent tests from executing.
  repeated Issue issues = 1;

  // The set of test results given the test cases in the `TestSuite`.
  // The results will appear in the same order as the test cases appear in the
  // `TestSuite`.
  repeated TestResult test_results = 2;
}
