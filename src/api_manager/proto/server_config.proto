// Copyright (C) Extensible Service Proxy Authors
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
////////////////////////////////////////////////////////////////////////////////
//
syntax = "proto3";

package google.api_manager.proto;

// Top-level server_config message.
message ServerConfig {
  // Server config used by service control client.
  ServiceControlConfig service_control_config = 1;

  // Metadata server config
  MetadataServerConfig metadata_server_config = 2;

  // Google Authentication Secret
  string google_authentication_secret = 3;

  // Server config used by service control client.
  CloudTracingConfig cloud_tracing_config = 4;

  // Server config used for API authentication
  ApiAuthenticationConfig api_authentication_config = 5;

  // Experimental flags
  Experimental experimental = 999;
}

// Server config for service control
message ServiceControlConfig {
  // Allows to disable the service-control feature regardless of the
  // service-control configuration in service config.
  bool force_disable = 1;

  // The URL of the service control server to use (overrides that specified in
  // service config). If the URL scheme is not provided, https:// is assumed.
  string url_override = 2;

  // Check aggregator config
  CheckAggregatorConfig check_aggregator_config = 3;

  // Report aggregator config
  ReportAggregatorConfig report_aggregator_config = 4;

  // Timeout in milliseconds on service control check requests.
  // If the value is <= 0, default timeout is 5000 milliseconds.
  int32 check_timeout_ms = 5;

  // Timeout in milliseconds on service control report requests.
  // If the value is <= 0, default timeout is 15000 milliseconds.
  int32 report_timeout_ms = 6;
}

// Check aggregator config
message CheckAggregatorConfig {
  // The maximum number of cache entries that can be kept in the aggregation
  // cache. Cache is disabled when entries <= 0.
  int32 cache_entries = 1;

  // The maximum milliseconds before aggregated check requests are flushed to
  // the server.
  int32 flush_interval_ms = 2;

  // The maximum milliseconds before a cached check response should be deleted.
  int32 response_expiration_ms = 3;
}

// Report aggregator config
message ReportAggregatorConfig {
  // The maximum number of cache entries that can be kept in the aggregation
  // cache. Cache is disabled when entries <= 0.
  int32 cache_entries = 1;

  // The maximum milliseconds before aggregated report requests are flushed to
  // the server. The cache entry is deleted after the flush.
  int32 flush_interval_ms = 2;
}

// Server config for Metadata Server
message MetadataServerConfig {
  // Whether the metadata server is enabled or not.
  bool enabled = 1;
  // MetadataServer url, if not specified defaults to "http://169.254.169.254"
  string url = 2;
}

// Server config for cloud tracing
message CloudTracingConfig {
  // Allows to disable the cloud-tracing feature regardless of the presence of
  // the cloud tracing header.
  bool force_disable = 1;

  // Override for the Cloud Tracing API url If the URL scheme is not provided,
  // https:// is assumed.
  string url_override = 2;

  // Config for trace aggregation.
  CloudTracingAggregationConfig aggregation_config = 3;

  // Config for trace sampling.
  CloudTracingSamplingConfig samling_config = 4;
}

message CloudTracingAggregationConfig {
  // The maximum time to hold a trace before sent to Cloud Trace API
  int32 time_millisec = 1;

  // The maximum number of traces that can be cached.
  int32 cache_max_size = 2;
}

message CloudTracingSamplingConfig {
  // ApiManager enables cloud trace with this minimum rate even all their
  // incoming requests don't have cloud trace enabled. Default value is 0.1.
  double minimum_qps = 1;
}

// Server config for API Authentication
message ApiAuthenticationConfig {
  // Allows to disable the API authentication regardless of the auth
  // configuration in service config.
  bool force_disable = 1;
}

message Experimental {
  // Disable log ESP status in nginx error log.
  bool disable_log_status = 1;
}
