// Copyright (C) Extensible Service Proxy Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
//
syntax = "proto3";

package google.api_manager.proto;

// Top-level server_config message.
message ServerConfig {
  // Server config used by service control client.
  ServiceControlConfig service_control_config = 1;

  // Metadata server config
  MetadataServerConfig metadata_server_config = 2;

  // Google Authentication Secret
  string google_authentication_secret = 3;

  // Server config used by service control client.
  CloudTracingConfig cloud_tracing_config = 4;

  // Server config used for API authentication
  ApiAuthenticationConfig api_authentication_config = 5;

  // Server config used for API authorization via Firebase Rules.
  ApiCheckSecurityRulesConfig api_check_security_rules_config = 7;

  // Service Management API configuration
  ServiceManagementConfig service_management_config = 11;

  // Init Service Configs.
  ServiceConfigRollout service_config_rollout = 12;

  // Common service API configuration
  ApiServiceConfig api_service_config = 13;

  // Get client IP address from the static header with position configuration
  ClientIPExtractionConfig client_ip_extraction_config = 14;

  // The service config rollout strategy, [fixed|managed]
  // fixed:  never change service config dynamically.
  // managed: follow service management service config rollout.
  string rollout_strategy = 10;

  // Experimental flags
  Experimental experimental = 999;

  // The attributes from the metadata server
  MetadataAttributes metadata_attributes = 15;

  // The overridden compute platform to be reported.
  string compute_platform_override = 16;

  // The SSL credential for gRPC backend.
  GrpcSslCredentials grpc_backend_ssl_credentials = 17;
}

// Server config for service control
message ServiceControlConfig {
  // Allows to disable the service-control feature regardless of the
  // service-control configuration in service config.
  bool force_disable = 1;

  // The URL of the service control server to use (overrides that specified in
  // service config). If the URL scheme is not provided, https:// is assumed.
  string url_override = 2;

  // Check aggregator config
  CheckAggregatorConfig check_aggregator_config = 3;

  // Report aggregator config
  ReportAggregatorConfig report_aggregator_config = 4;

  // Timeout in milliseconds on service control check requests.
  // If the value is <= 0, default timeout is 1500 milliseconds.
  int32 check_timeout_ms = 5;

  // Timeout in milliseconds on service control report requests.
  // If the value is <= 0, default timeout is 3500 milliseconds.
  int32 report_timeout_ms = 6;

  // The intermediate reports for streaming calls should not be more frequent
  // than this value (in seconds)
  int32 intermediate_report_min_interval = 7;

  // Quota aggregator config
  QuotaAggregatorConfig quota_aggregator_config = 8;

  // Timeout in milliseconds on service control allocate quota requests.
  // If the value is <= 0, default timeout is 1500 milliseconds.
  int32 quota_timeout_ms = 9;

  // Config for log HTTP request headers.
  repeated string log_request_header = 10;

  // Config for log HTTP response headers.
  repeated string log_response_header = 11;

  // Config for log corresponding fields in jwt payload.
  // The value must be a field in JWT payload.
  repeated string log_jwt_payload = 12;

  // The number of retries on service control check calls.
  // If the value is <= 0, default is 3.
  int32 check_retries = 13;

  // The number of retries on service control report calls.
  // If the value is <= 0, default is 5.
  int32 report_retries = 14;

  // The number of retries on service control allocate quota calls.
  // If the value is <= 0, default is 1.
  int32 quota_retries = 15;

  // In case of failing to connect to service control service, the requests
  // are allowed if this field is true.  Default is false.
  bool network_fail_open = 16;

  // If set to true, reports api_key_uid instead of api_key in ServiceControl
  // report.
  bool enable_api_key_uid_reporting = 17;
}

// Check aggregator config
message CheckAggregatorConfig {
  // The maximum number of cache entries that can be kept in the aggregation
  // cache. Cache is disabled when entries <= 0.
  int32 cache_entries = 1;

  // The maximum milliseconds before aggregated check requests are flushed to
  // the server.
  int32 flush_interval_ms = 2;

  // The maximum milliseconds before a cached check response should be deleted.
  int32 response_expiration_ms = 3;
}

// Quota aggregator config
message QuotaAggregatorConfig {
  // The maximum number of cache entries that can be kept in the aggregation
  // cache. Cache is disabled when entries <= 0.
  int32 cache_entries = 1;

  // The maximum milliseconds before aggregated quota requests are refreshed to
  // the server.
  int32 refresh_interval_ms = 2;
}

// Report aggregator config
message ReportAggregatorConfig {
  // The maximum number of cache entries that can be kept in the aggregation
  // cache. Cache is disabled when entries <= 0.
  int32 cache_entries = 1;

  // The maximum milliseconds before aggregated report requests are flushed to
  // the server. The cache entry is deleted after the flush.
  int32 flush_interval_ms = 2;
}

// Server config for Metadata Server
message MetadataServerConfig {
  // Whether the metadata server is enabled or not.
  bool enabled = 1;
  // MetadataServer url, if not specified defaults to "http://169.254.169.254"
  string url = 2;
}

// Server config for cloud tracing
message CloudTracingConfig {
  // Allows to disable the cloud-tracing feature regardless of the presence of
  // the cloud tracing header.
  bool force_disable = 1;

  // Override for the Cloud Tracing API url If the URL scheme is not provided,
  // https:// is assumed.
  string url_override = 2;

  // Config for trace aggregation.
  CloudTracingAggregationConfig aggregation_config = 3;

  // Config for trace sampling.
  CloudTracingSamplingConfig samling_config = 4;
}

message CloudTracingAggregationConfig {
  // The maximum time to hold a trace before sent to Cloud Trace API
  int32 time_millisec = 1;

  // The maximum number of traces that can be cached.
  int32 cache_max_size = 2;
}

message CloudTracingSamplingConfig {
  // ApiManager enables cloud trace with this minimum rate even all their
  // incoming requests don't have cloud trace enabled. Default value is 0.1.
  double minimum_qps = 1;
}

// Server config for API Authentication
message ApiAuthenticationConfig {
  // Allows to disable the API authentication regardless of the auth
  // configuration in service config.
  bool force_disable = 1;

  // Specify the JWKS public key cache duration in seconds.
  // If not specified, or 0, default is 300 (5 minutes).
  int32 jwks_cache_duration_in_s = 2;

  // If true, authentication failed requests will be redirected to
  // the URL specified by "authorizationUrl" field in OpenAPI spec.
  bool redirect_authorization_url = 3;
}

// Server config for API Authorization via Firebase Rules
message ApiCheckSecurityRulesConfig {
  // Firebase server to use.
  string firebase_server = 1;
}

message ServiceManagementConfig {
  // ServiceManagement service url, if not specified defaults
  // to "https://servicemanagement.googleapis.com"
  string url = 1;

  // The throttle window in seconds to fetch the new service config.
  // The latest_rollout_id from Check/Report response is used to detect
  // new service config rollout. If a new rollout is detected, each ESP
  // instance will start a timer based on this throttle window to call
  // Google ServiceManagement service to fetch the new service config.
  // The goal is not to have all ESP instances to call the ServiceManagement
  // at the same time to exceed its quota.
  // If not specified, or 0, default is 300 (5 minutes).
  int32 fetch_throttle_window_s = 2;

  // The periodical timer interval in seconds to detect rollout changes.
  // If not specified, or 0, default is 60s (1 minute).
  int32 detect_rollout_interval_s = 3;
}

// Maps service configuration files to their corresponding traffic percentage.
message ServiceConfigTrafficPercentage {
  // The service configuration file name
  string service_config_file_full_path = 1;
  // The traffic percentage
  double traffic_percentage = 2;
}

message ServiceConfigRollout {
  // Maps service configuration file path to their corresponding traffic
  // percentage. Key is the full path of the service configuration file,
  // Value is the traffic percentage
  map<string, double> traffic_percentages = 1;

  // Latest rollout id.
  string rollout_id = 2;
}

// Common configurations for API service configuration
message ApiServiceConfig {
  // A rewrite consists of two arguments separated by spaces. The arguments are:
  //
  //  pattern: which incoming URLs should be affected by the rule. PCRE
  //    compatible regular expression checked against the request
  //    URI, which is the part after http://hostname
  //  replacement: where should the matching requests be sent. Modification to
  //    the part matched by the pattern or absolute path. Replacement
  //    starts with either "http://" or "https://" is not allowed
  //
  // ex. "^/?([a-z]+)/(.*)$ /api.foo?page=$1&id=$2"
  //        ---$1--- -$2-                  |     |
  //            |      +-------------------+-----+
  //            +--------------------------+
  //
  // Rewrite rules are executed sequentially in the order of "repeated" field.
  repeated string rewrite = 1;
}

// Get client IP address from the header with position configuration
message ClientIPExtractionConfig {
  // Defines HTTP header name where client IP will be extracted.
  string client_ip_header = 1;

  // Defines the position of the client IP address.
  // Same as the array index in many languages, such as Python.
  int32 client_ip_position = 2;
}

message Experimental {
  // Disable timed printouts of ESP status to the error log.
  bool disable_log_status = 1;
  // Configure response to JSON translator option for JsonPrintOptions:
  bool always_print_primitive_fields = 2;
  // Whether to preserve proto field names
  bool preserve_proto_field_names = 3;
}

message AccessToken {
  // The actual token string
  string access_token = 1;
  // The time in second to expire
  int32 expires_in = 2;
  // The token type
  string token_type = 3;
}

message MetadataAttributes {
  // The value from "project/project-id"
  string project_id = 1;
  // The value from "instance/zone"
  string zone = 2;
  // The value from "instance/attributes/gae_server_software"
  string gae_server_software = 3;
  // The value from "instance/attributes/kube-env"
  string kube_env = 4;
  // The access token from default service account
  AccessToken access_token = 5;
}

// See https://grpc.io/grpc/cpp/structgrpc_1_1_ssl_credentials_options.html.
message GrpcSslCredentials {
  // enable ssl if true.
  bool use_ssl = 1;

  // https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61
  bool use_google_default = 2;

  // PEM encoded server root certificates.
  string root_certs_file = 3;

  // PEM encoded client private key.
  string private_key_file = 4;

  // PEM encoded client certificate chain.
  string cert_chain_file = 5;
}
